# -*- coding: utf-8 -*-
"""Leaf_vs_Non-Leaf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PHKUWfRl-7Yfx7TC-jXE4YTKUgZeAwPa
"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':'13VWhNZrRtf_N9tj-s8FfIRPDGQ1vlgL7'}) # replace the id with id of file you want to access
downloaded.GetContentFile('Model1.zip')

from zipfile import ZipFile
file_name = "Model1.zip"

with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print('Done')

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

# re-size all the images to this
IMAGE_SIZE = [224, 224]

train_path = '/content/Model1/Train'
valid_path = '/content/Model1/Test'

# add preprocessing layer to the front of VGG
vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# don't train existing weights
for layer in vgg.layers:
  layer.trainable = False

# our layers - you can add more if you want
x = Flatten()(vgg.output)
# x = Dense(1000, activation='relu')(x)
prediction = Dense(2, activation='softmax')(x)

# create a model object
model = Model(inputs=vgg.input, outputs=prediction)

# view the structure of the model
model.summary()

# tell the model what cost and optimization method to use
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory(train_path,
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(valid_path,
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

'''r=model.fit_generator(training_set,
                         samples_per_epoch = 8000,
                         nb_epoch = 5,
                         validation_data = test_set,
                         nb_val_samples = 2000)'''

# fit the model
r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=10,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

# loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# accuracies
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

import tensorflow as tf

from keras.models import load_model

model.save('Leaf_vs_Non-Leaf.h5')

downloaded = drive.CreateFile({'id':'1tMNN32HSZfooBs0cZS49WlJxIMmVHSu6'}) # replace the id with id of file you want to access
downloaded.GetContentFile('Prediction.zip')

from zipfile import ZipFile
file_name = "Prediction.zip"

with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print('Done')

model= load_model("Leaf_vs_Non-Leaf.h5")

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
img=image.load_img("/content/Prediction/nonLeaf/n02381460_703.jpg", target_size=(224, 224))
img = img_to_array(img)
    # Reshape the image into a sample of 3 channel
img = img.reshape(1, 224, 224, 3)
    # Prepare it as pixel data
img = img.astype('float32')
img = img / 255.0

predict = model.predict(img)
class_prediction=np.argmax(predict,axis=1)

if class_prediction[0] == 0:
                        product1 = "Leaf"
else:
                        product1 = "Non-Leaf"
              
print(product1)